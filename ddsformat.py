from enum import Enum

class DDSFormat(Enum):
    BC1 = (bytes([0x00, 0x05, 0x00, 0x00]), bytes([0x44, 0x58, 0x54, 0x31]), 8) # DXT1
    BC3 = (bytes([0x00, 0x09, 0x00, 0xFF]), bytes([0x44, 0x58, 0x54, 0x35]), 16) # DXT5

    def __init__(self, img, magic, size):
        self.img = img
        self.magic = magic
        self.size = size # Bytes to store a block of 4x4 pixels

    def get_header(self, width, height):
        if width % 4 != 0 or height % 4 != 0:
            raise ValueError('Invalid size. Width and height must be a multiple of 4')

        header = bytearray([0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x08, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

        header[12:16] = height.to_bytes(4, byteorder='little')
        header[16:20] = width.to_bytes(4, byteorder='little')
        header[20:24] = (height * width // (4 * 4) * self.size).to_bytes(4, byteorder='little') # Linear size
        header[84:88] = self.magic
        return header

    @staticmethod
    def from_string(value):
        for format in DDSFormat:
            if value == format.name:
                return format
        raise ValueError('Unknown format')

    @staticmethod
    def from_img(value):
        for format in DDSFormat:
            if value[10:14] == format.img:
                return format
        raise ValueError('Unknown format')

